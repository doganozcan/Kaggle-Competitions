# -*- coding: utf-8 -*-
"""Tabular_Playground_2022

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G0zutu5jXLMedQ6NFxnNOpVTlPGuZwZm
"""

# !pip install lightautoml

import os
import time

import numpy as np
import pandas as pd
from sklearn.metrics import log_loss, accuracy_score
from sklearn.model_selection import train_test_split
import torch

from lightautoml.automl.presets.tabular_presets import TabularAutoML
from lightautoml.tasks import Task
from lightautoml.report.report_deco import ReportDeco

test=pd.read_csv('test.csv')
train=pd.read_csv('train.csv')
submission=pd.read_csv('sample_submission.csv')

print(train.shape)
train.head()

print(test.shape)
test.head()

df=pd.DataFrame(test)
df['direction'].unique()

dir_mapper = {'EB': [1,0], 
              'NB': [0,1], 
              'SB': [0,-1], 
              'WB': [-1,0], 
              'NE': [1,1], 
              'SW': [-1,-1], 
              'NW': [-1,1], 
              'SE': [1,-1]}

def feature_engineering(data):
    data['time'] = pd.to_datetime(data['time'])
    data['month'] = data['time'].dt.month
    data['weekday'] = data['time'].dt.weekday
    data['hour'] = data['time'].dt.hour
    data['minute'] = data['time'].dt.minute
    data['converted_direction_coord_0'] = data['direction'].map(lambda x: dir_mapper[x][0])
    data['converted_direction_coord_1'] = data['direction'].map(lambda x: dir_mapper[x][1])
    data['is_month_start'] = data['time'].dt.is_month_start.astype('int')
    data['is_month_end'] = data['time'].dt.is_month_end.astype('int')
    data['hour+minute'] = data['time'].dt.hour * 60 + data['time'].dt.minute
    data['is_weekend'] = (data['time'].dt.dayofweek > 4).astype('int')
    data['is_afternoon'] = (data['time'].dt.hour > 12).astype('int')
    data['x+y'] = data['x'].astype('str') + data['y'].astype('str')
    data['x+y+direction'] = data['x'].astype('str') + data['y'].astype('str') + data['direction'].astype('str')
    data['x+y+direction0'] = data['x'].astype('str') + data['y'].astype('str') + data['converted_direction_coord_0'].astype('str')
    data['x+y+direction1'] = data['x'].astype('str') + data['y'].astype('str') + data['converted_direction_coord_1'].astype('str')
    data['hour+direction'] = data['hour'].astype('str') + data['direction'].astype('str')
    data['hour+x+y'] = data['hour'].astype('str') + data['x'].astype('str') + data['y'].astype('str')
    data['hour+direction+x'] = data['hour'].astype('str') + data['direction'].astype('str') + data['x'].astype('str')
    data['hour+direction+y'] = data['hour'].astype('str') + data['direction'].astype('str') + data['y'].astype('str')
    data['hour+direction+x+y'] = data['hour'].astype('str') + data['direction'].astype('str') + data['x'].astype('str') + data['y'].astype('str')
    data['hour+x'] = data['hour'].astype('str') + data['x'].astype('str')
    data['hour+y'] = data['hour'].astype('str') + data['y'].astype('str')

for data in [train, test]:
    feature_engineering(data)
    
train.head()

N_THREADS=4             
RANDOM_STATE=42         
TIMEOUT=5*3600           
TARGET_NAME='congestion'

np.random.seed(RANDOM_STATE)
torch.set_num_threads(N_THREADS)

task = Task('reg', metric='mae', loss='mae')

roles = {'target': TARGET_NAME,
         'drop': ['row_id']
         }

# Commented out IPython magic to ensure Python compatibility.
# %%time 
# 
# automl = TabularAutoML(task = task,
#                        timeout = TIMEOUT,
#                        cpu_limit = N_THREADS,
#                        reader_params = {'n_jobs': N_THREADS, 'random_state': RANDOM_STATE},
#                        general_params = {'use_algos': [['lgb']]}
#                       )

oof_pred = automl.fit_predict(train, roles = roles, verbose=1)
print('oof_pred:\n{}\nShape = {}'.format(oof_pred, oof_pred.shape))

# Commented out IPython magic to ensure Python compatibility.
# %%time
# 
# fast_fi = automl.get_feature_scores('fast')
# fast_fi.set_index('Feature')['Importance'].plot.bar(figsize=(20, 10), grid=True)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# 
# test_pred = automl.predict(test)
# print('Prediction for test data:\n{}\nShape = {}'
#               .format(test_pred, test_pred.shape))

submission[TARGET_NAME] = test_pred.data[:, 0]
submission.to_csv('LightAutoML_TabularAutoML.csv', index=False)
submission

submission.describe()

# submission.to_csv('submissionV1.csv',index=False)